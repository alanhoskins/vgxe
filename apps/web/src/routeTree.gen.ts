/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root';
import { Route as RegisterRouteImport } from './routes/register';
import { Route as LoginRouteImport } from './routes/login';
import { Route as IndexRouteImport } from './routes/index';
import { Route as ConfigurationsIndexRouteImport } from './routes/configurations/index';
import { Route as ConfigurationsNewRouteImport } from './routes/configurations/new';
import { Route as ConfigurationsConfigIdIndexRouteImport } from './routes/configurations/$configId/index';
import { Route as ConfigurationsConfigIdBuilderRouteImport } from './routes/configurations/$configId/builder';

const RegisterRoute = RegisterRouteImport.update({
  id: '/register',
  path: '/register',
  getParentRoute: () => rootRouteImport,
} as any);
const LoginRoute = LoginRouteImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => rootRouteImport,
} as any);
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any);
const ConfigurationsIndexRoute = ConfigurationsIndexRouteImport.update({
  id: '/configurations/',
  path: '/configurations/',
  getParentRoute: () => rootRouteImport,
} as any);
const ConfigurationsNewRoute = ConfigurationsNewRouteImport.update({
  id: '/configurations/new',
  path: '/configurations/new',
  getParentRoute: () => rootRouteImport,
} as any);
const ConfigurationsConfigIdIndexRoute =
  ConfigurationsConfigIdIndexRouteImport.update({
    id: '/configurations/$configId/',
    path: '/configurations/$configId/',
    getParentRoute: () => rootRouteImport,
  } as any);
const ConfigurationsConfigIdBuilderRoute =
  ConfigurationsConfigIdBuilderRouteImport.update({
    id: '/configurations/$configId/builder',
    path: '/configurations/$configId/builder',
    getParentRoute: () => rootRouteImport,
  } as any);

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute;
  '/login': typeof LoginRoute;
  '/register': typeof RegisterRoute;
  '/configurations/new': typeof ConfigurationsNewRoute;
  '/configurations': typeof ConfigurationsIndexRoute;
  '/configurations/$configId/builder': typeof ConfigurationsConfigIdBuilderRoute;
  '/configurations/$configId': typeof ConfigurationsConfigIdIndexRoute;
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute;
  '/login': typeof LoginRoute;
  '/register': typeof RegisterRoute;
  '/configurations/new': typeof ConfigurationsNewRoute;
  '/configurations': typeof ConfigurationsIndexRoute;
  '/configurations/$configId/builder': typeof ConfigurationsConfigIdBuilderRoute;
  '/configurations/$configId': typeof ConfigurationsConfigIdIndexRoute;
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport;
  '/': typeof IndexRoute;
  '/login': typeof LoginRoute;
  '/register': typeof RegisterRoute;
  '/configurations/new': typeof ConfigurationsNewRoute;
  '/configurations/': typeof ConfigurationsIndexRoute;
  '/configurations/$configId/builder': typeof ConfigurationsConfigIdBuilderRoute;
  '/configurations/$configId/': typeof ConfigurationsConfigIdIndexRoute;
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath;
  fullPaths:
    | '/'
    | '/login'
    | '/register'
    | '/configurations/new'
    | '/configurations'
    | '/configurations/$configId/builder'
    | '/configurations/$configId';
  fileRoutesByTo: FileRoutesByTo;
  to:
    | '/'
    | '/login'
    | '/register'
    | '/configurations/new'
    | '/configurations'
    | '/configurations/$configId/builder'
    | '/configurations/$configId';
  id:
    | '__root__'
    | '/'
    | '/login'
    | '/register'
    | '/configurations/new'
    | '/configurations/'
    | '/configurations/$configId/builder'
    | '/configurations/$configId/';
  fileRoutesById: FileRoutesById;
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute;
  LoginRoute: typeof LoginRoute;
  RegisterRoute: typeof RegisterRoute;
  ConfigurationsNewRoute: typeof ConfigurationsNewRoute;
  ConfigurationsIndexRoute: typeof ConfigurationsIndexRoute;
  ConfigurationsConfigIdBuilderRoute: typeof ConfigurationsConfigIdBuilderRoute;
  ConfigurationsConfigIdIndexRoute: typeof ConfigurationsConfigIdIndexRoute;
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/register': {
      id: '/register';
      path: '/register';
      fullPath: '/register';
      preLoaderRoute: typeof RegisterRouteImport;
      parentRoute: typeof rootRouteImport;
    };
    '/login': {
      id: '/login';
      path: '/login';
      fullPath: '/login';
      preLoaderRoute: typeof LoginRouteImport;
      parentRoute: typeof rootRouteImport;
    };
    '/': {
      id: '/';
      path: '/';
      fullPath: '/';
      preLoaderRoute: typeof IndexRouteImport;
      parentRoute: typeof rootRouteImport;
    };
    '/configurations/': {
      id: '/configurations/';
      path: '/configurations';
      fullPath: '/configurations';
      preLoaderRoute: typeof ConfigurationsIndexRouteImport;
      parentRoute: typeof rootRouteImport;
    };
    '/configurations/new': {
      id: '/configurations/new';
      path: '/configurations/new';
      fullPath: '/configurations/new';
      preLoaderRoute: typeof ConfigurationsNewRouteImport;
      parentRoute: typeof rootRouteImport;
    };
    '/configurations/$configId/': {
      id: '/configurations/$configId/';
      path: '/configurations/$configId';
      fullPath: '/configurations/$configId';
      preLoaderRoute: typeof ConfigurationsConfigIdIndexRouteImport;
      parentRoute: typeof rootRouteImport;
    };
    '/configurations/$configId/builder': {
      id: '/configurations/$configId/builder';
      path: '/configurations/$configId/builder';
      fullPath: '/configurations/$configId/builder';
      preLoaderRoute: typeof ConfigurationsConfigIdBuilderRouteImport;
      parentRoute: typeof rootRouteImport;
    };
  }
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  LoginRoute: LoginRoute,
  RegisterRoute: RegisterRoute,
  ConfigurationsNewRoute: ConfigurationsNewRoute,
  ConfigurationsIndexRoute: ConfigurationsIndexRoute,
  ConfigurationsConfigIdBuilderRoute: ConfigurationsConfigIdBuilderRoute,
  ConfigurationsConfigIdIndexRoute: ConfigurationsConfigIdIndexRoute,
};
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>();
