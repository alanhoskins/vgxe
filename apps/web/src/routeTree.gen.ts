/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root';
import { Route as SettingsRouteImport } from './routes/settings';
import { Route as RegisterRouteImport } from './routes/register';
import { Route as LoginRouteImport } from './routes/login';
import { Route as IndexRouteImport } from './routes/index';
import { Route as MutationsIndexRouteImport } from './routes/mutations/index';
import { Route as MutationsStudioRouteImport } from './routes/mutations/studio';
import { Route as MutationsConfigIdIndexRouteImport } from './routes/mutations/$configId/index';
import { Route as MutationsConfigIdEditRouteImport } from './routes/mutations/$configId/edit';

const SettingsRoute = SettingsRouteImport.update({
  id: '/settings',
  path: '/settings',
  getParentRoute: () => rootRouteImport,
} as any);
const RegisterRoute = RegisterRouteImport.update({
  id: '/register',
  path: '/register',
  getParentRoute: () => rootRouteImport,
} as any);
const LoginRoute = LoginRouteImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => rootRouteImport,
} as any);
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any);
const MutationsIndexRoute = MutationsIndexRouteImport.update({
  id: '/mutations/',
  path: '/mutations/',
  getParentRoute: () => rootRouteImport,
} as any);
const MutationsStudioRoute = MutationsStudioRouteImport.update({
  id: '/mutations/studio',
  path: '/mutations/studio',
  getParentRoute: () => rootRouteImport,
} as any);
const MutationsConfigIdIndexRoute = MutationsConfigIdIndexRouteImport.update({
  id: '/mutations/$configId/',
  path: '/mutations/$configId/',
  getParentRoute: () => rootRouteImport,
} as any);
const MutationsConfigIdEditRoute = MutationsConfigIdEditRouteImport.update({
  id: '/mutations/$configId/edit',
  path: '/mutations/$configId/edit',
  getParentRoute: () => rootRouteImport,
} as any);

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute;
  '/login': typeof LoginRoute;
  '/register': typeof RegisterRoute;
  '/settings': typeof SettingsRoute;
  '/mutations/studio': typeof MutationsStudioRoute;
  '/mutations': typeof MutationsIndexRoute;
  '/mutations/$configId/edit': typeof MutationsConfigIdEditRoute;
  '/mutations/$configId': typeof MutationsConfigIdIndexRoute;
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute;
  '/login': typeof LoginRoute;
  '/register': typeof RegisterRoute;
  '/settings': typeof SettingsRoute;
  '/mutations/studio': typeof MutationsStudioRoute;
  '/mutations': typeof MutationsIndexRoute;
  '/mutations/$configId/edit': typeof MutationsConfigIdEditRoute;
  '/mutations/$configId': typeof MutationsConfigIdIndexRoute;
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport;
  '/': typeof IndexRoute;
  '/login': typeof LoginRoute;
  '/register': typeof RegisterRoute;
  '/settings': typeof SettingsRoute;
  '/mutations/studio': typeof MutationsStudioRoute;
  '/mutations/': typeof MutationsIndexRoute;
  '/mutations/$configId/edit': typeof MutationsConfigIdEditRoute;
  '/mutations/$configId/': typeof MutationsConfigIdIndexRoute;
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath;
  fullPaths:
    | '/'
    | '/login'
    | '/register'
    | '/settings'
    | '/mutations/studio'
    | '/mutations'
    | '/mutations/$configId/edit'
    | '/mutations/$configId';
  fileRoutesByTo: FileRoutesByTo;
  to:
    | '/'
    | '/login'
    | '/register'
    | '/settings'
    | '/mutations/studio'
    | '/mutations'
    | '/mutations/$configId/edit'
    | '/mutations/$configId';
  id:
    | '__root__'
    | '/'
    | '/login'
    | '/register'
    | '/settings'
    | '/mutations/studio'
    | '/mutations/'
    | '/mutations/$configId/edit'
    | '/mutations/$configId/';
  fileRoutesById: FileRoutesById;
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute;
  LoginRoute: typeof LoginRoute;
  RegisterRoute: typeof RegisterRoute;
  SettingsRoute: typeof SettingsRoute;
  MutationsStudioRoute: typeof MutationsStudioRoute;
  MutationsIndexRoute: typeof MutationsIndexRoute;
  MutationsConfigIdEditRoute: typeof MutationsConfigIdEditRoute;
  MutationsConfigIdIndexRoute: typeof MutationsConfigIdIndexRoute;
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/settings': {
      id: '/settings';
      path: '/settings';
      fullPath: '/settings';
      preLoaderRoute: typeof SettingsRouteImport;
      parentRoute: typeof rootRouteImport;
    };
    '/register': {
      id: '/register';
      path: '/register';
      fullPath: '/register';
      preLoaderRoute: typeof RegisterRouteImport;
      parentRoute: typeof rootRouteImport;
    };
    '/login': {
      id: '/login';
      path: '/login';
      fullPath: '/login';
      preLoaderRoute: typeof LoginRouteImport;
      parentRoute: typeof rootRouteImport;
    };
    '/': {
      id: '/';
      path: '/';
      fullPath: '/';
      preLoaderRoute: typeof IndexRouteImport;
      parentRoute: typeof rootRouteImport;
    };
    '/mutations/': {
      id: '/mutations/';
      path: '/mutations';
      fullPath: '/mutations';
      preLoaderRoute: typeof MutationsIndexRouteImport;
      parentRoute: typeof rootRouteImport;
    };
    '/mutations/studio': {
      id: '/mutations/studio';
      path: '/mutations/studio';
      fullPath: '/mutations/studio';
      preLoaderRoute: typeof MutationsStudioRouteImport;
      parentRoute: typeof rootRouteImport;
    };
    '/mutations/$configId/': {
      id: '/mutations/$configId/';
      path: '/mutations/$configId';
      fullPath: '/mutations/$configId';
      preLoaderRoute: typeof MutationsConfigIdIndexRouteImport;
      parentRoute: typeof rootRouteImport;
    };
    '/mutations/$configId/edit': {
      id: '/mutations/$configId/edit';
      path: '/mutations/$configId/edit';
      fullPath: '/mutations/$configId/edit';
      preLoaderRoute: typeof MutationsConfigIdEditRouteImport;
      parentRoute: typeof rootRouteImport;
    };
  }
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  LoginRoute: LoginRoute,
  RegisterRoute: RegisterRoute,
  SettingsRoute: SettingsRoute,
  MutationsStudioRoute: MutationsStudioRoute,
  MutationsIndexRoute: MutationsIndexRoute,
  MutationsConfigIdEditRoute: MutationsConfigIdEditRoute,
  MutationsConfigIdIndexRoute: MutationsConfigIdIndexRoute,
};
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>();
